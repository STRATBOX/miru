name: ci

on:
  push:
    # branches: [ master, staging, develop, release/* ]
    tags:
      - "*"

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT }}
  GITHUB_SHA: ${{ github.sha }}
  GITHUB_REF: ${{ github.ref }}
  ORG: konoha
  IMAGE: miru
  REGISTRY_HOSTNAME: eu.gcr.io/${{ secrets.GCP_PROJECT }}
  CARGO_TERM_COLOR: always

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      - uses: actions-rs/cargo@v1
        with:
          command: test

  fmt:
    name: Rustfmt
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
          components: rustfmt
      - uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check

  clippy:
    name: Clippy
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
          components: clippy
      - uses: actions-rs/clippy-check@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          args: -- -D warnings

  coverage:
    name: Code coverage
    runs-on: ubuntu-latest
    needs: [test]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Install stable toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Run cargo-tarpaulin
        uses: actions-rs/tarpaulin@v0.1
        with:
          args: '--ignore-tests'
  
  deploy:
    name: Build, and Deploy
    runs-on: ubuntu-latest
    # needs: [test] # Only run this workflow when "build" workflow succeeds

    steps:
      - name: Get the version
        id: get_version
        run: echo ::set-output name=VERSION::${GITHUB_REF/refs\/tags\//}

      - name: Get short commit id
        id: vars
        run: echo "::set-output name=SHORT_COMMIT_ID::$(git rev-parse --short HEAD)"

      - name: Print version
        run: |
          echo [github.tag]: ${{ steps.get_version.outputs.VERSION }}
          echo [github.sha]: ${{ github.sha }}
          echo [github.ref]: ${{ github.ref }}
          echo [github.sha]: ${{ github.sha }}
      - name: Checkout
        uses: actions/checkout@v2
      # Setup gcloud CLI
      - uses: GoogleCloudPlatform/github-actions/setup-gcloud@master
        with:
          version: "290.0.1"
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          project_id: ${{ secrets.GCP_PROJECT }}
      # Configure docker to use the gcloud command-line tool as a credential helper
      - run: |
          # Set up docker to authenticate
          # via gcloud command-line tool.
          gcloud auth configure-docker
      
          # Build the Docker image
      # images name in format - [ORG]/[IMAGE] e.g. roava.io/myimage
      - name: Build
        id: build
        run: |
          export TAG=`echo ${{ steps.get_version.outputs.VERSION }}`
          export CONTAINER=`echo $ORG/$IMAGE`
          docker build -t "$REGISTRY_HOSTNAME"/"$CONTAINER":"$TAG" \
          -t "$REGISTRY_HOSTNAME"/"$CONTAINER":"${GITHUB_SHA::8}" \
          -t "$REGISTRY_HOSTNAME"/"$CONTAINER":"$GITHUB_SHA" .
      # Push the Docker image to Google Container Registry
      # images name in format - [ORG]/[IMAGE] e.g. roava.io/myimage
      # docker push "$REGISTRY_HOSTNAME"/"$CONTAINER":"$GITHUB_SHA"
      - name: Publish
        id: publish
        run: |
          export TAG=`echo ${{ steps.get_version.outputs.VERSION }}`
          export CONTAINER=`echo $ORG/$IMAGE`
          docker push "$REGISTRY_HOSTNAME"/"$CONTAINER":"$TAG"